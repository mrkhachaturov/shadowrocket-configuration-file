name: Update GeoLite2 MMDB

on:
  workflow_dispatch:
  schedule:
    - cron: "0 3 * * 1"

permissions:
  contents: write

jobs:
  fetch_geolite2:
    runs-on: ubuntu-latest
    steps:
      - id: app-token
        name: Create GitHub App token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ steps.app-token.outputs.token }}
          persist-credentials: false

      - name: Download and extract GeoLite2 Country and ASN
        env:
          MAXMIND_ACCOUNT_ID: ${{ secrets.MAXMIND_ACCOUNT_ID }}
          MAXMIND_LICENSE_KEY: ${{ secrets.MAXMIND_LICENSE_KEY }}
        run: |
          set -euo pipefail
          mkdir -p geoip

          tmpdir=$(mktemp -d)
          trap 'rm -rf "${tmpdir}"' EXIT

          # Helper to attempt download with Basic Auth then fallback to license_key param
          dl_mmdb() {
            local edition="$1" # GeoLite2-Country or GeoLite2-ASN
            local outtgz="$2"

            echo "Preflight HEAD ${edition} (Basic Auth)..."
            if ! curl -fsSIL \
              --location \
              -u "${MAXMIND_ACCOUNT_ID}:${MAXMIND_LICENSE_KEY}" \
              "https://download.maxmind.com/geoip/databases/${edition}/download?suffix=tar.gz"; then
              echo "WARN: HEAD preflight failed for ${edition}. Continuing to download attempts..." >&2
            fi

            echo "Downloading ${edition} (Basic Auth, follows redirects)..."
            if curl -fSLo "${outtgz}" \
              --location \
              --retry 3 \
              --retry-all-errors \
              --connect-timeout 15 \
              --max-time 300 \
              -u "${MAXMIND_ACCOUNT_ID}:${MAXMIND_LICENSE_KEY}" \
              "https://download.maxmind.com/geoip/databases/${edition}/download?suffix=tar.gz"; then
              return 0
            fi

            echo "Basic Auth download failed for ${edition}. Trying fallback license_key param endpoint..." >&2
            local edition_id
            case "${edition}" in
              GeoLite2-Country) edition_id="GeoLite2-Country";;
              GeoLite2-ASN) edition_id="GeoLite2-ASN";;
              *) echo "Unknown edition ${edition}" >&2; return 1;;
            esac

            curl -fSLo "${outtgz}" \
              --location \
              --retry 3 \
              --retry-all-errors \
              --connect-timeout 15 \
              --max-time 300 \
              "https://download.maxmind.com/app/geoip_download?edition_id=${edition_id}&license_key=${MAXMIND_LICENSE_KEY}&suffix=tar.gz"
          }

          dl_mmdb "GeoLite2-Country" "${tmpdir}/country.tar.gz"
          dl_mmdb "GeoLite2-ASN" "${tmpdir}/asn.tar.gz"

          echo "Extracting MMDB files..."
          tar -xzf "${tmpdir}/country.tar.gz" -C "${tmpdir}"
          tar -xzf "${tmpdir}/asn.tar.gz" -C "${tmpdir}"

          country_mmdb=$(find "${tmpdir}" -type f -name "GeoLite2-Country.mmdb" | head -n 1)
          asn_mmdb=$(find "${tmpdir}" -type f -name "GeoLite2-ASN.mmdb" | head -n 1)

          if [ -z "${country_mmdb}" ] || [ -z "${asn_mmdb}" ]; then
            echo "MMDB files not found after extraction" >&2
            exit 1
          fi

          mv -f "${country_mmdb}" geoip/GeoLite2-Country.mmdb
          mv -f "${asn_mmdb}" geoip/GeoLite2-ASN.mmdb

          ls -lh geoip

      - name: Configure git identity
        run: |
          git config --local user.name "github-app[bot]"
          git config --local user.email "github-app[bot]@users.noreply.github.com"

      - name: Commit MMDB updates
        run: |
          git add geoip/GeoLite2-Country.mmdb geoip/GeoLite2-ASN.mmdb
          git commit -m "GeoIP: update GeoLite2 Country/ASN MMDB [skip ci]" || echo "No changes to commit"

      - name: Push to main with App token
        env:
          APP_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          git remote set-url origin https://x-access-token:${APP_TOKEN}@github.com/${{ github.repository }}.git
          git push origin HEAD:main


